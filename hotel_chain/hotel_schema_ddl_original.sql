-- Hotel Chain - Sales and Revenue Management Data Model
-- Snowflake DDL Scripts

-- Create database and schema
CREATE DATABASE IF NOT EXISTS HOTEL_CHAIN;
USE DATABASE HOTEL_CHAIN;

CREATE SCHEMA IF NOT EXISTS SALES_REVENUE;
USE SCHEMA SALES_REVENUE;

-- 1. HOTELS TABLE
-- Master table containing all hotel properties
CREATE OR REPLACE TABLE HOTELS (
    HOTEL_ID VARCHAR(20) PRIMARY KEY,
    HOTEL_NAME VARCHAR(100) NOT NULL,
    BRAND VARCHAR(50) NOT NULL, -- Grand, Park, Regency, etc.
    CITY VARCHAR(50) NOT NULL,
    STATE_PROVINCE VARCHAR(50),
    COUNTRY VARCHAR(50) NOT NULL,
    REGION VARCHAR(50) NOT NULL, -- Americas, ASPAC, EAME
    MARKET_SEGMENT VARCHAR(30) NOT NULL, -- Luxury, Premium, Select
    TOTAL_ROOMS INTEGER NOT NULL,
    OPENING_DATE DATE NOT NULL,
    LAST_RENOVATION_DATE DATE,
    PROPERTY_TYPE VARCHAR(30) NOT NULL, -- Resort, Urban, Airport, Convention
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 2. ROOM_TYPES TABLE
-- Different room categories available across hotels
CREATE OR REPLACE TABLE ROOM_TYPES (
    ROOM_TYPE_ID VARCHAR(20) PRIMARY KEY,
    ROOM_TYPE_NAME VARCHAR(50) NOT NULL,
    ROOM_CATEGORY VARCHAR(30) NOT NULL, -- Standard, Premium, Suite, Executive
    BASE_OCCUPANCY INTEGER NOT NULL,
    MAX_OCCUPANCY INTEGER NOT NULL,
    ROOM_SIZE_SQFT INTEGER,
    AMENITIES_TIER VARCHAR(20) NOT NULL, -- Basic, Enhanced, Luxury
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 3. HOTEL_ROOM_INVENTORY TABLE
-- Room inventory by hotel and room type
CREATE OR REPLACE TABLE HOTEL_ROOM_INVENTORY (
    HOTEL_ID VARCHAR(20),
    ROOM_TYPE_ID VARCHAR(20),
    ROOM_COUNT INTEGER NOT NULL,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (HOTEL_ID, ROOM_TYPE_ID),
    FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(HOTEL_ID),
    FOREIGN KEY (ROOM_TYPE_ID) REFERENCES ROOM_TYPES(ROOM_TYPE_ID)
);

-- 4. CUSTOMERS TABLE
-- Customer master data
CREATE OR REPLACE TABLE CUSTOMERS (
    CUSTOMER_ID VARCHAR(20) PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    LOYALTY_TIER VARCHAR(20), -- Discoverist, Explorist, Globalist, Lifetime Globalist
    LOYALTY_POINTS INTEGER DEFAULT 0,
    MEMBER_SINCE_DATE DATE,
    BIRTH_DATE DATE,
    GENDER VARCHAR(10),
    COUNTRY VARCHAR(50),
    PREFERRED_LANGUAGE VARCHAR(20),
    MARKETING_OPT_IN BOOLEAN DEFAULT FALSE,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 5. CORPORATE_ACCOUNTS TABLE
-- Corporate and group accounts
CREATE OR REPLACE TABLE CORPORATE_ACCOUNTS (
    ACCOUNT_ID VARCHAR(20) PRIMARY KEY,
    COMPANY_NAME VARCHAR(100) NOT NULL,
    INDUSTRY VARCHAR(50),
    ACCOUNT_MANAGER VARCHAR(100),
    CONTRACT_TYPE VARCHAR(30), -- Corporate Rate, Group Block, Event Contract
    DISCOUNT_PERCENTAGE DECIMAL(5,2),
    ANNUAL_ROOM_NIGHTS_COMMITMENT INTEGER,
    CONTRACT_START_DATE DATE,
    CONTRACT_END_DATE DATE,
    ACCOUNT_STATUS VARCHAR(20) DEFAULT 'Active',
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 6. RESERVATIONS TABLE
-- Main reservations/bookings table
CREATE OR REPLACE TABLE RESERVATIONS (
    RESERVATION_ID VARCHAR(30) PRIMARY KEY,
    CONFIRMATION_NUMBER VARCHAR(20) UNIQUE NOT NULL,
    HOTEL_ID VARCHAR(20) NOT NULL,
    CUSTOMER_ID VARCHAR(20),
    CORPORATE_ACCOUNT_ID VARCHAR(20),
    ROOM_TYPE_ID VARCHAR(20) NOT NULL,
    CHECK_IN_DATE DATE NOT NULL,
    CHECK_OUT_DATE DATE NOT NULL,
    NIGHTS INTEGER NOT NULL,
    ADULTS_COUNT INTEGER NOT NULL,
    CHILDREN_COUNT INTEGER DEFAULT 0,
    ROOMS_BOOKED INTEGER NOT NULL,
    BOOKING_DATE DATE NOT NULL,
    BOOKING_CHANNEL VARCHAR(30) NOT NULL, -- Direct, OTA, GDS, Phone, Walk-in
    BOOKING_SOURCE VARCHAR(50), -- Hyatt.com, Expedia, Booking.com, etc.
    RESERVATION_STATUS VARCHAR(20) NOT NULL, -- Confirmed, Cancelled, No-Show, Completed
    CANCELLATION_DATE DATE,
    CANCELLATION_REASON VARCHAR(100),
    RATE_CODE VARCHAR(20),
    RATE_PLAN VARCHAR(50),
    ROOM_RATE DECIMAL(10,2) NOT NULL,
    TOTAL_ROOM_REVENUE DECIMAL(12,2) NOT NULL,
    TAXES DECIMAL(10,2) NOT NULL,
    FEES DECIMAL(10,2) DEFAULT 0,
    TOTAL_AMOUNT DECIMAL(12,2) NOT NULL,
    CURRENCY_CODE VARCHAR(3) DEFAULT 'USD',
    GUEST_TYPE VARCHAR(20), -- Business, Leisure, Group, Corporate
    SPECIAL_REQUESTS TEXT,
    LOYALTY_POINTS_EARNED INTEGER DEFAULT 0,
    ADVANCE_BOOKING_DAYS INTEGER,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(HOTEL_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (CORPORATE_ACCOUNT_ID) REFERENCES CORPORATE_ACCOUNTS(ACCOUNT_ID),
    FOREIGN KEY (ROOM_TYPE_ID) REFERENCES ROOM_TYPES(ROOM_TYPE_ID)
);

-- 7. DAILY_ROOM_RATES TABLE
-- Daily rate management and pricing
CREATE OR REPLACE TABLE DAILY_ROOM_RATES (
    HOTEL_ID VARCHAR(20),
    ROOM_TYPE_ID VARCHAR(20),
    RATE_DATE DATE,
    RATE_CODE VARCHAR(20),
    RATE_PLAN VARCHAR(50),
    BASE_RATE DECIMAL(10,2) NOT NULL,
    DISCOUNTED_RATE DECIMAL(10,2),
    AVAILABLE_ROOMS INTEGER NOT NULL,
    ROOMS_SOLD INTEGER DEFAULT 0,
    REVENUE_GENERATED DECIMAL(12,2) DEFAULT 0,
    DEMAND_LEVEL VARCHAR(20), -- Low, Medium, High, Peak
    SEASONAL_FACTOR DECIMAL(5,2) DEFAULT 1.0,
    EVENT_IMPACT BOOLEAN DEFAULT FALSE,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (HOTEL_ID, ROOM_TYPE_ID, RATE_DATE, RATE_CODE),
    FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(HOTEL_ID),
    FOREIGN KEY (ROOM_TYPE_ID) REFERENCES ROOM_TYPES(ROOM_TYPE_ID)
);

-- 8. ANCILLARY_SERVICES TABLE
-- Additional services and amenities
CREATE OR REPLACE TABLE ANCILLARY_SERVICES (
    SERVICE_ID VARCHAR(20) PRIMARY KEY,
    SERVICE_NAME VARCHAR(100) NOT NULL,
    SERVICE_CATEGORY VARCHAR(30) NOT NULL, -- F&B, Spa, Business, Recreation, Transportation
    SERVICE_TYPE VARCHAR(50), -- Restaurant, Room Service, Parking, WiFi, etc.
    BASE_PRICE DECIMAL(10,2) NOT NULL,
    IS_TAXABLE BOOLEAN DEFAULT TRUE,
    IS_COMMISSIONABLE BOOLEAN DEFAULT FALSE,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 9. ANCILLARY_SALES TABLE
-- Sales of additional services
CREATE OR REPLACE TABLE ANCILLARY_SALES (
    SALE_ID VARCHAR(30) PRIMARY KEY,
    RESERVATION_ID VARCHAR(30),
    HOTEL_ID VARCHAR(20) NOT NULL,
    CUSTOMER_ID VARCHAR(20),
    SERVICE_ID VARCHAR(20) NOT NULL,
    SALE_DATE DATE NOT NULL,
    QUANTITY INTEGER NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    TOTAL_AMOUNT DECIMAL(12,2) NOT NULL,
    DISCOUNT_AMOUNT DECIMAL(10,2) DEFAULT 0,
    TAX_AMOUNT DECIMAL(10,2) NOT NULL,
    PAYMENT_METHOD VARCHAR(20),
    TRANSACTION_STATUS VARCHAR(20) DEFAULT 'Completed',
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (RESERVATION_ID) REFERENCES RESERVATIONS(RESERVATION_ID),
    FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(HOTEL_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (SERVICE_ID) REFERENCES ANCILLARY_SERVICES(SERVICE_ID)
);

-- 10. EVENTS_CALENDAR TABLE
-- Local events that impact demand
CREATE OR REPLACE TABLE EVENTS_CALENDAR (
    EVENT_ID VARCHAR(20) PRIMARY KEY,
    EVENT_NAME VARCHAR(200) NOT NULL,
    EVENT_TYPE VARCHAR(50), -- Conference, Convention, Sports, Festival, Holiday
    CITY VARCHAR(50) NOT NULL,
    EVENT_START_DATE DATE NOT NULL,
    EVENT_END_DATE DATE NOT NULL,
    EXPECTED_ATTENDANCE INTEGER,
    DEMAND_IMPACT VARCHAR(20), -- Low, Medium, High, Extreme
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 11. COMPETITIVE_SET TABLE
-- Competitor hotel information
CREATE OR REPLACE TABLE COMPETITIVE_SET (
    COMP_SET_ID VARCHAR(20) PRIMARY KEY,
    HOTEL_ID VARCHAR(20) NOT NULL,
    COMPETITOR_NAME VARCHAR(100) NOT NULL,
    COMPETITOR_BRAND VARCHAR(50),
    STAR_RATING DECIMAL(2,1),
    DISTANCE_MILES DECIMAL(5,2),
    SIMILAR_ROOM_COUNT INTEGER,
    IS_PRIMARY_COMPETITOR BOOLEAN DEFAULT FALSE,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(HOTEL_ID)
);

-- 12. REVENUE_SUMMARY TABLE
-- Daily revenue rollup for performance tracking
CREATE OR REPLACE TABLE REVENUE_SUMMARY (
    HOTEL_ID VARCHAR(20),
    BUSINESS_DATE DATE,
    TOTAL_ROOMS_AVAILABLE INTEGER NOT NULL,
    ROOMS_SOLD INTEGER NOT NULL,
    OCCUPANCY_RATE DECIMAL(5,2) NOT NULL,
    ADR DECIMAL(10,2) NOT NULL, -- Average Daily Rate
    REVPAR DECIMAL(10,2) NOT NULL, -- Revenue Per Available Room
    ROOM_REVENUE DECIMAL(12,2) NOT NULL,
    ANCILLARY_REVENUE DECIMAL(12,2) NOT NULL,
    TOTAL_REVENUE DECIMAL(12,2) NOT NULL,
    WALK_IN_ROOMS INTEGER DEFAULT 0,
    GROUP_ROOMS INTEGER DEFAULT 0,
    CORPORATE_ROOMS INTEGER DEFAULT 0,
    LEISURE_ROOMS INTEGER DEFAULT 0,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (HOTEL_ID, BUSINESS_DATE),
    FOREIGN KEY (HOTEL_ID) REFERENCES HOTELS(HOTEL_ID)
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS IDX_RESERVATIONS_CHECKIN ON RESERVATIONS(CHECK_IN_DATE);
CREATE INDEX IF NOT EXISTS IDX_RESERVATIONS_HOTEL_DATE ON RESERVATIONS(HOTEL_ID, CHECK_IN_DATE);
CREATE INDEX IF NOT EXISTS IDX_RESERVATIONS_CUSTOMER ON RESERVATIONS(CUSTOMER_ID);
CREATE INDEX IF NOT EXISTS IDX_RESERVATIONS_STATUS ON RESERVATIONS(RESERVATION_STATUS);
CREATE INDEX IF NOT EXISTS IDX_DAILY_RATES_DATE ON DAILY_ROOM_RATES(RATE_DATE);
CREATE INDEX IF NOT EXISTS IDX_ANCILLARY_SALES_DATE ON ANCILLARY_SALES(SALE_DATE);
CREATE INDEX IF NOT EXISTS IDX_REVENUE_SUMMARY_DATE ON REVENUE_SUMMARY(BUSINESS_DATE);

-- Create views for common business queries
CREATE OR REPLACE VIEW VW_HOTEL_PERFORMANCE AS
SELECT 
    h.HOTEL_ID,
    h.HOTEL_NAME,
    h.BRAND,
    h.CITY,
    h.COUNTRY,
    h.REGION,
    h.MARKET_SEGMENT,
    rs.BUSINESS_DATE,
    rs.OCCUPANCY_RATE,
    rs.ADR,
    rs.REVPAR,
    rs.ROOM_REVENUE,
    rs.ANCILLARY_REVENUE,
    rs.TOTAL_REVENUE
FROM HOTELS h
JOIN REVENUE_SUMMARY rs ON h.HOTEL_ID = rs.HOTEL_ID;

CREATE OR REPLACE VIEW VW_CUSTOMER_BOOKING_HISTORY AS
SELECT 
    c.CUSTOMER_ID,
    c.FIRST_NAME,
    c.LAST_NAME,
    c.LOYALTY_TIER,
    r.RESERVATION_ID,
    r.HOTEL_ID,
    h.HOTEL_NAME,
    r.CHECK_IN_DATE,
    r.CHECK_OUT_DATE,
    r.NIGHTS,
    r.TOTAL_AMOUNT,
    r.BOOKING_CHANNEL,
    r.GUEST_TYPE
FROM CUSTOMERS c
JOIN RESERVATIONS r ON c.CUSTOMER_ID = r.CUSTOMER_ID
JOIN HOTELS h ON r.HOTEL_ID = h.HOTEL_ID;

COMMENT ON DATABASE HOTEL_CHAIN IS 'Hotel chain sales and revenue management data warehouse';
COMMENT ON SCHEMA SALES_REVENUE IS 'Core sales and revenue management tables and objects';
