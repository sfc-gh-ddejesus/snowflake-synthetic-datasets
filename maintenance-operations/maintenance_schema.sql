-- Industrial Maintenance Operations Database Schema
-- Snowflake DDL Scripts

-- Create database and schema
CREATE DATABASE IF NOT EXISTS MAINTENANCE_OPERATIONS;
USE DATABASE MAINTENANCE_OPERATIONS;
CREATE SCHEMA IF NOT EXISTS OPERATIONS;
USE SCHEMA OPERATIONS;

-- =====================================================
-- 1. EQUIPMENT TABLE
-- Stores information about all equipment/assets
-- =====================================================
CREATE OR REPLACE TABLE EQUIPMENT (
    EQUIPMENT_ID VARCHAR(20) PRIMARY KEY,
    EQUIPMENT_NAME VARCHAR(100) NOT NULL,
    EQUIPMENT_TYPE VARCHAR(50) NOT NULL,
    MANUFACTURER VARCHAR(50),
    MODEL VARCHAR(50),
    SERIAL_NUMBER VARCHAR(50),
    INSTALLATION_DATE DATE,
    LOCATION VARCHAR(100),
    FACILITY VARCHAR(50),
    CRITICALITY_LEVEL VARCHAR(20), -- HIGH, MEDIUM, LOW
    STATUS VARCHAR(20), -- ACTIVE, INACTIVE, DECOMMISSIONED
    REPLACEMENT_COST DECIMAL(12,2),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- 2. TECHNICIANS TABLE
-- Information about maintenance technicians
-- =====================================================
CREATE OR REPLACE TABLE TECHNICIANS (
    TECHNICIAN_ID VARCHAR(10) PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    HIRE_DATE DATE,
    SPECIALIZATION VARCHAR(100), -- Electrical, Mechanical, Instrumentation, etc.
    CERTIFICATION_LEVEL VARCHAR(20), -- JUNIOR, INTERMEDIATE, SENIOR, EXPERT
    HOURLY_RATE DECIMAL(8,2),
    STATUS VARCHAR(20), -- ACTIVE, INACTIVE
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- 3. MAINTENANCE_TYPES TABLE
-- Different types of maintenance operations
-- =====================================================
CREATE OR REPLACE TABLE MAINTENANCE_TYPES (
    MAINTENANCE_TYPE_ID VARCHAR(10) PRIMARY KEY,
    TYPE_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(200),
    CATEGORY VARCHAR(30), -- PREVENTIVE, CORRECTIVE, PREDICTIVE, EMERGENCY
    TYPICAL_DURATION_HOURS DECIMAL(6,2),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- 4. WORK_ORDERS TABLE
-- Main table for maintenance work orders
-- =====================================================
CREATE OR REPLACE TABLE WORK_ORDERS (
    WORK_ORDER_ID VARCHAR(15) PRIMARY KEY,
    EQUIPMENT_ID VARCHAR(20) NOT NULL,
    MAINTENANCE_TYPE_ID VARCHAR(10) NOT NULL,
    PRIORITY VARCHAR(20), -- EMERGENCY, HIGH, MEDIUM, LOW
    STATUS VARCHAR(20), -- OPEN, IN_PROGRESS, COMPLETED, CANCELLED
    DESCRIPTION TEXT,
    REQUESTED_BY VARCHAR(100),
    REQUESTED_DATE TIMESTAMP,
    SCHEDULED_START_DATE TIMESTAMP,
    SCHEDULED_END_DATE TIMESTAMP,
    ACTUAL_START_DATE TIMESTAMP,
    ACTUAL_END_DATE TIMESTAMP,
    ESTIMATED_HOURS DECIMAL(6,2),
    ACTUAL_HOURS DECIMAL(6,2),
    ESTIMATED_COST DECIMAL(10,2),
    ACTUAL_COST DECIMAL(10,2),
    DOWNTIME_HOURS DECIMAL(6,2),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    
    FOREIGN KEY (EQUIPMENT_ID) REFERENCES EQUIPMENT(EQUIPMENT_ID),
    FOREIGN KEY (MAINTENANCE_TYPE_ID) REFERENCES MAINTENANCE_TYPES(MAINTENANCE_TYPE_ID)
);

-- =====================================================
-- 5. WORK_ORDER_ASSIGNMENTS TABLE
-- Links technicians to work orders
-- =====================================================
CREATE OR REPLACE TABLE WORK_ORDER_ASSIGNMENTS (
    ASSIGNMENT_ID VARCHAR(15) PRIMARY KEY,
    WORK_ORDER_ID VARCHAR(15) NOT NULL,
    TECHNICIAN_ID VARCHAR(10) NOT NULL,
    ROLE VARCHAR(30), -- LEAD, ASSISTANT, SPECIALIST
    HOURS_WORKED DECIMAL(6,2),
    ASSIGNMENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    
    FOREIGN KEY (WORK_ORDER_ID) REFERENCES WORK_ORDERS(WORK_ORDER_ID),
    FOREIGN KEY (TECHNICIAN_ID) REFERENCES TECHNICIANS(TECHNICIAN_ID)
);

-- =====================================================
-- 6. PARTS_INVENTORY TABLE
-- Spare parts and materials inventory
-- =====================================================
CREATE OR REPLACE TABLE PARTS_INVENTORY (
    PART_ID VARCHAR(15) PRIMARY KEY,
    PART_NAME VARCHAR(100) NOT NULL,
    PART_NUMBER VARCHAR(50),
    DESCRIPTION VARCHAR(200),
    CATEGORY VARCHAR(50),
    MANUFACTURER VARCHAR(50),
    UNIT_COST DECIMAL(10,2),
    QUANTITY_ON_HAND INTEGER,
    REORDER_POINT INTEGER,
    LOCATION VARCHAR(50),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- 7. WORK_ORDER_PARTS TABLE
-- Parts used in work orders
-- =====================================================
CREATE OR REPLACE TABLE WORK_ORDER_PARTS (
    USAGE_ID VARCHAR(15) PRIMARY KEY,
    WORK_ORDER_ID VARCHAR(15) NOT NULL,
    PART_ID VARCHAR(15) NOT NULL,
    QUANTITY_USED INTEGER NOT NULL,
    UNIT_COST DECIMAL(10,2),
    TOTAL_COST DECIMAL(10,2),
    USED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    
    FOREIGN KEY (WORK_ORDER_ID) REFERENCES WORK_ORDERS(WORK_ORDER_ID),
    FOREIGN KEY (PART_ID) REFERENCES PARTS_INVENTORY(PART_ID)
);

-- =====================================================
-- 8. MAINTENANCE_PROCEDURES TABLE
-- Standard maintenance procedures and instructions
-- =====================================================
CREATE OR REPLACE TABLE MAINTENANCE_PROCEDURES (
    PROCEDURE_ID VARCHAR(15) PRIMARY KEY,
    PROCEDURE_NAME VARCHAR(100) NOT NULL,
    EQUIPMENT_TYPE VARCHAR(50),
    MAINTENANCE_TYPE_ID VARCHAR(10),
    DESCRIPTION TEXT,
    STEP_BY_STEP_INSTRUCTIONS TEXT,
    SAFETY_REQUIREMENTS TEXT,
    TOOLS_REQUIRED TEXT,
    ESTIMATED_DURATION_HOURS DECIMAL(6,2),
    SKILL_LEVEL_REQUIRED VARCHAR(20),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    
    FOREIGN KEY (MAINTENANCE_TYPE_ID) REFERENCES MAINTENANCE_TYPES(MAINTENANCE_TYPE_ID)
);

-- =====================================================
-- 9. FAILURE_CODES TABLE
-- Standard failure codes and root causes
-- =====================================================
CREATE OR REPLACE TABLE FAILURE_CODES (
    FAILURE_CODE VARCHAR(10) PRIMARY KEY,
    FAILURE_DESCRIPTION VARCHAR(200) NOT NULL,
    FAILURE_CATEGORY VARCHAR(50), -- ELECTRICAL, MECHANICAL, HYDRAULIC, etc.
    ROOT_CAUSE VARCHAR(200),
    RECOMMENDED_ACTION TEXT,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- =====================================================
-- 10. WORK_ORDER_FAILURES TABLE
-- Links work orders to failure codes
-- =====================================================
CREATE OR REPLACE TABLE WORK_ORDER_FAILURES (
    WORK_ORDER_ID VARCHAR(15),
    FAILURE_CODE VARCHAR(10),
    NOTES TEXT,
    RECORDED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    
    PRIMARY KEY (WORK_ORDER_ID, FAILURE_CODE),
    FOREIGN KEY (WORK_ORDER_ID) REFERENCES WORK_ORDERS(WORK_ORDER_ID),
    FOREIGN KEY (FAILURE_CODE) REFERENCES FAILURE_CODES(FAILURE_CODE)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================
CREATE INDEX IF NOT EXISTS idx_equipment_type ON EQUIPMENT(EQUIPMENT_TYPE);
CREATE INDEX IF NOT EXISTS idx_equipment_location ON EQUIPMENT(LOCATION);
CREATE INDEX IF NOT EXISTS idx_work_orders_status ON WORK_ORDERS(STATUS);
CREATE INDEX IF NOT EXISTS idx_work_orders_priority ON WORK_ORDERS(PRIORITY);
CREATE INDEX IF NOT EXISTS idx_work_orders_dates ON WORK_ORDERS(SCHEDULED_START_DATE, ACTUAL_END_DATE);
CREATE INDEX IF NOT EXISTS idx_technician_specialization ON TECHNICIANS(SPECIALIZATION);

-- =====================================================
-- VIEWS FOR COMMON QUERIES
-- =====================================================

-- View for active work orders with equipment and technician details
CREATE OR REPLACE VIEW VW_ACTIVE_WORK_ORDERS AS
SELECT 
    wo.WORK_ORDER_ID,
    wo.PRIORITY,
    wo.STATUS,
    wo.DESCRIPTION,
    e.EQUIPMENT_NAME,
    e.EQUIPMENT_TYPE,
    e.LOCATION,
    mt.TYPE_NAME as MAINTENANCE_TYPE,
    wo.SCHEDULED_START_DATE,
    wo.ACTUAL_START_DATE,
    wo.ESTIMATED_HOURS,
    wo.ACTUAL_HOURS
FROM WORK_ORDERS wo
JOIN EQUIPMENT e ON wo.EQUIPMENT_ID = e.EQUIPMENT_ID
JOIN MAINTENANCE_TYPES mt ON wo.MAINTENANCE_TYPE_ID = mt.MAINTENANCE_TYPE_ID
WHERE wo.STATUS IN ('OPEN', 'IN_PROGRESS');

-- View for maintenance productivity metrics
CREATE OR REPLACE VIEW VW_MAINTENANCE_PRODUCTIVITY AS
SELECT 
    t.TECHNICIAN_ID,
    t.FIRST_NAME || ' ' || t.LAST_NAME as TECHNICIAN_NAME,
    t.SPECIALIZATION,
    COUNT(DISTINCT woa.WORK_ORDER_ID) as WORK_ORDERS_COMPLETED,
    SUM(woa.HOURS_WORKED) as TOTAL_HOURS_WORKED,
    AVG(woa.HOURS_WORKED) as AVG_HOURS_PER_WORK_ORDER,
    COUNT(DISTINCT woa.WORK_ORDER_ID) / NULLIF(SUM(woa.HOURS_WORKED), 0) * 8 as WORK_ORDERS_PER_DAY
FROM TECHNICIANS t
JOIN WORK_ORDER_ASSIGNMENTS woa ON t.TECHNICIAN_ID = woa.TECHNICIAN_ID
JOIN WORK_ORDERS wo ON woa.WORK_ORDER_ID = wo.WORK_ORDER_ID
WHERE wo.STATUS = 'COMPLETED'
GROUP BY t.TECHNICIAN_ID, t.FIRST_NAME, t.LAST_NAME, t.SPECIALIZATION;

-- View for equipment maintenance history
CREATE OR REPLACE VIEW VW_EQUIPMENT_MAINTENANCE_HISTORY AS
SELECT 
    e.EQUIPMENT_ID,
    e.EQUIPMENT_NAME,
    e.EQUIPMENT_TYPE,
    e.LOCATION,
    COUNT(wo.WORK_ORDER_ID) as TOTAL_WORK_ORDERS,
    SUM(CASE WHEN wo.STATUS = 'COMPLETED' THEN 1 ELSE 0 END) as COMPLETED_WORK_ORDERS,
    SUM(wo.ACTUAL_HOURS) as TOTAL_MAINTENANCE_HOURS,
    SUM(wo.ACTUAL_COST) as TOTAL_MAINTENANCE_COST,
    SUM(wo.DOWNTIME_HOURS) as TOTAL_DOWNTIME_HOURS,
    MAX(wo.ACTUAL_END_DATE) as LAST_MAINTENANCE_DATE
FROM EQUIPMENT e
LEFT JOIN WORK_ORDERS wo ON e.EQUIPMENT_ID = wo.EQUIPMENT_ID
GROUP BY e.EQUIPMENT_ID, e.EQUIPMENT_NAME, e.EQUIPMENT_TYPE, e.LOCATION;

COMMENT ON DATABASE MAINTENANCE_OPERATIONS IS 'Industrial maintenance operations database containing equipment, work orders, technicians, and maintenance history';
